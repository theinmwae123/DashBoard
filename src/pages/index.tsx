import { type NextPage } from "next";
import Head from "next/head";
import {
  CTable,
  CTableBody,
  CTableCaption,
  CTableDataCell,
  CTableHead,
  CTableHeaderCell,
  CTableRow,
  CNavbar,
  CContainer,
  CNavbarBrand,
  CCollapse,
  CNavbarNav,
  CNavItem,
  CNavLink,
  CDropdown,
  CDropdownToggle,
  CDropdownItem,
  CDropdownMenu,
  CNavbarToggler,
  CForm,
  CFormInput,
  CButton,
  CDropdownDivider,
  


} from "@coreui/react-pro"

import {
  CChartLine,
  CChart

} from '@coreui/react-chartjs'

import {
  getColor,
  getStyle,
 
} from "@coreui/utils"

import { api } from "~/utils/api";
import Link from "next/link";
import { useState } from "react";

const Home: NextPage = () => {
  const { data } = api.example.getData.useQuery(undefined, {
    // refetchInterval: 10000          //in ms
  });
  // const data = undefined
  const [visible, setVisible] = useState(false)

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
      <CNavbar expand="lg" colorScheme="light"  style={{backgroundColor : 'lightpink'}}>
      <CContainer fluid>
      <CNavbarBrand href="#">
      <img
        src={"/Plant.jpg"}
        alt=""
        width="22"
        height="24"
        className="d-inline-block align-top"
      /> CoreUI</CNavbarBrand>
        <CNavbarToggler onClick={() => setVisible(!visible)} />
        <CCollapse className="navbar-collapse" visible={visible}>
          <CNavbarNav>
            <CNavItem>
              <CNavLink href="#" active>
                Home
              </CNavLink>
            </CNavItem>
            <CNavItem>
              <CNavLink href="/test">Link</CNavLink>
            </CNavItem>
            <CDropdown variant="nav-item" popper={false}>
              <CDropdownToggle color="secondary">Dropdown button</CDropdownToggle>
              <CDropdownMenu>
                <CDropdownItem href="#">Action</CDropdownItem>
                <CDropdownItem href="#">Another action</CDropdownItem>
                <CDropdownDivider />
                <CDropdownItem href="#">Something else here</CDropdownItem>
              </CDropdownMenu>
            </CDropdown>
            <CNavItem>
              <CNavLink href="#" disabled>
                Disabled
              </CNavLink>
            </CNavItem>
          </CNavbarNav>
        </CCollapse>
      </CContainer>
    </CNavbar>
        
        {!!data && 
        <>
          <CTable style={{width : '50%'}}>
            <CTableCaption>Data Points</CTableCaption>
            <CTableHead>
              <CTableRow>
                <CTableHeaderCell>Tempearture</CTableHeaderCell>
                <CTableHeaderCell>Humidity</CTableHeaderCell>
                <CTableHeaderCell>Co2</CTableHeaderCell>
                <CTableHeaderCell>PH</CTableHeaderCell>
                <CTableHeaderCell>Timestamp</CTableHeaderCell>
              </CTableRow>
            </CTableHead>
            <CTableBody>
              {data.map((data, index) => (
                <CTableRow key={index}>
                  <CTableDataCell>{data.temperature}</CTableDataCell>
                  <CTableDataCell>{data.humidity}</CTableDataCell>
                  <CTableDataCell>{data.CO2}</CTableDataCell>
                  <CTableDataCell>{data.PH}</CTableDataCell>
                  <CTableDataCell>{data.updated_at?.toLocaleString()}</CTableDataCell>
                </CTableRow>
              ))}
            </CTableBody>
          </CTable>
          <CChartLine
            style={{width : '50%'}}
            data={{
              labels: data.map((data) => (data.updated_at?.toTimeString())),
              datasets: [
                {
                  label: "Temperature",
                  backgroundColor: 'red',
                  borderColor: 'red',
                  pointBackgroundColor: 'red',
                  pointBorderColor: '#000000',
                  data: data.map((data) => (data.temperature))
                },
                {
                  label: "Humidity",
                  backgroundColor: 'blue',
                  borderColor: 'blue',
                  pointBackgroundColor: 'blue',
                  pointBorderColor: '#000000',
                  data: data.map((data) => (data.humidity))
                },
                {
                  label: "CO2",
                  backgroundColor: 'yellow',
                  borderColor: 'yellow',
                  pointBackgroundColor: 'yellow',
                  pointBorderColor: '#000000',
                  data: data.map((data) => (data.CO2))
                },
                {
                  label: "PH",
                  backgroundColor: 'orange',
                  borderColor: 'orange',
                  pointBackgroundColor: 'orange',
                  pointBorderColor: '#000000',
                  data: data.map((data) => (data.PH))
                },
              ]
            }}
          />
        </>
        }
      </main>
    </>
  );
};

export default Home;
